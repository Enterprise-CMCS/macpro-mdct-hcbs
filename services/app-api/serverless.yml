service: app-api

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-associate-waf
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-api-client-certificate
  - serverless-offline
  - "@enterprise-cmcs/serverless-waf-plugin"

custom:
  project: "hcbs"
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${sls:stage}
  region: ${aws:region}
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
  wafExcludeRules:
    awsCommon:
      - "SizeRestrictions_BODY"
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  dotenv:
    path: ../../.env
  bannerTableName: ${env:BANNER_TABLE_NAME, param:BannerTableName}
  qmsReportTableName: ${env:QMS_REPORT_TABLE_NAME, param:QmsReportTableName}
  webAclName: ${self:service}-${self:custom.stage}-webacl-waf
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  serverlessApiClientCertificate:
    rotateCerts: true
    daysLeft: 30
  authValue:
    main: aws_iam
    val: aws_iam
    production: aws_iam

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${env:IAM_PATH, ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY, ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
          Resource: "*"
        - Effect: "Allow"
          Action:
            - execute-api:Invoke
          Resource: "*"
  environment:
    STAGE: ${self:custom.stage}
    BANNER_TABLE_NAME: ${self:custom.bannerTableName}
    QMS_REPORT_TABLE_NAME: ${self:custom.qmsReportTableName}

functions:
  createBanner:
    handler: handlers/banners/create.createBanner
    events:
      - http:
          path: banners/{bannerId}
          method: post
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                bannerId: true
  deleteBanner:
    handler: handlers/banners/delete.deleteBanner
    events:
      - http:
          path: banners/{bannerId}
          method: delete
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                bannerId: true
  fetchBanner:
    handler: handlers/banners/fetch.fetchBanner
    events:
      - http:
          path: banners/{bannerId}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                bannerId: true
  createReport:
    handler: handlers/reports/create.createReport
    events:
      - http:
          path: reports/{reportType}/{state}
          method: post
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
  updateReport:
    handler: handlers/reports/update.updateReport
    events:
      - http:
          path: reports/{reportType}/{state}/{id}
          method: put
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  submitReport:
    handler: handlers/reports/submit.submitReport
    events:
      - http:
          path: reports/submit/{reportType}/{state}/{id}
          method: post
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  getReport:
    handler: handlers/reports/get.getReport
    events:
      - http:
          path: reports/{reportType}/{state}/{id}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  getReportsForState:
    handler: handlers/reports/get.getReportsForState
    events:
      - http:
          path: reports/{reportType}/{state}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                reportType: true
                state: true
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
