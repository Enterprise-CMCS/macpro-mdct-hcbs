service: app-api

package:
  individually: true

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-associate-waf
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-api-client-certificate
  - serverless-offline
  - "@enterprise-cmcs/serverless-waf-plugin"

custom:
  project: "hcbs"
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${sls:stage}
  region: ${aws:region}
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
  wafExcludeRules:
    awsCommon:
      - "SizeRestrictions_BODY"
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  dotenv:
    path: ../../.env
  webAclName: ${self:service}-${self:custom.stage}-webacl-waf
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  vpcId: ${env:VPC_ID, ssm:/configuration/${self:custom.stage}/vpc/id, ssm:/configuration/default/vpc/id}
  privateSubnets:
    - ${env:VPC_SUBNET_A, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/a/id, ssm:/configuration/default/vpc/subnets/private/a/id}
    - ${env:VPC_SUBNET_B, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/b/id, ssm:/configuration/default/vpc/subnets/private/b/id}
    - ${env:VPC_SUBNET_C, ssm:/configuration/${self:custom.stage}/vpc/subnets/private/c/id, ssm:/configuration/default/vpc/subnets/private/c/id}
  serverlessApiClientCertificate:
    rotateCerts: true
    daysLeft: 30
  authValue:
    main: aws_iam
    val: aws_iam
    production: aws_iam

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${env:IAM_PATH, ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY, ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
          Resource: "*"
        - Effect: "Allow"
          Action:
            - execute-api:Invoke
          Resource: "*"
  environment:
    STAGE: ${self:custom.stage}

functions:
  getHelloWorld:
    handler: handlers/helloWorld/get.getHelloWorld
    events:
      - http:
          path: helloWorld
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
